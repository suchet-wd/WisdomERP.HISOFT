using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity.Infrastructure;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace HI.ENTITY
{
    public partial class InerfacePOToAX : DevExpress.XtraEditors.XtraForm
    {
        public InerfacePOToAX()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;

            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.GetQueryable += entityInstantFeedbackSource2_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.DismissQueryable += entityInstantFeedbackSource2_DismissQueryable;

        }

        private void ocmexit_Click(object sender, EventArgs e)
        {
            this.Close(); 
        }

        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            try
            {
                string filter = FTRefer.Text.Trim();
                // Instantiate a new DataContext
                HI.ENTITY.DataInterfaceAX dataContext = new HI.ENTITY.DataInterfaceAX();
               

                string strconnecttion = "data source=wsm-mer;initial catalog=HITECH_SYSLOG;user id=sa;pwd=[vdw,jwfh;MultipleActiveResultSets=True;App=EntityFramework";
                dataContext.Database.Connection.ConnectionString = strconnecttion;

                // Assign a queryable source to the EntityInstantFeedbackSource

                if (filter == "") {
                    e.QueryableSource = dataContext.TAX_PO_HIT_OB_2Purchase_order_lines;
                } else {
                    e.QueryableSource = dataContext.TAX_PO_HIT_OB_2Purchase_order_lines.Where(x=> x.PurchId.Contains(filter)) ;
                }
              
                // Assign the DataContext to the Tag property,
                // to dispose of it in the DismissQueryable event handler
                e.Tag = dataContext;

            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }

           
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Dispose of the DataContext
            ((HI.ENTITY.DataInterfaceAX)e.Tag).Dispose();
        }

        void entityInstantFeedbackSource2_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            try {

                string filter = FTRefer.Text.Trim();
                // Instantiate a new DataContext
                HI.ENTITY.DataInterfaceAX dataContext = new HI.ENTITY.DataInterfaceAX();

                string strconnecttion = "data source=wsm-mer;initial catalog=HITECH_SYSLOG;user id=sa;pwd=[vdw,jwfh;MultipleActiveResultSets=True;App=EntityFramework";
                dataContext.Database.Connection.ConnectionString = strconnecttion;

                // Assign a queryable source to the EntityInstantFeedbackSource

                if (filter == "")
                {
                    e.QueryableSource = dataContext.TAX_PO_HIT_OB_1Purchase_order_headers;
                }
                else
                {
                    e.QueryableSource = dataContext.TAX_PO_HIT_OB_1Purchase_order_headers.Where(x => x.PurchId.Contains(filter));
                }

              
                // Assign the DataContext to the Tag property,
                // to dispose of it in the DismissQueryable event handler
                e.Tag = dataContext;
            } catch (Exception ex){
                string msg = ex.Message ; 
            }
           
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource2_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Dispose of the DataContext
            ((HI.ENTITY.DataInterfaceAX)e.Tag).Dispose();
        }

        private void ocmload_Click(object sender, EventArgs e)
        {
            FTRefer.Text = "";
            entityInstantFeedbackSource1.Refresh();
            entityInstantFeedbackSource2.Refresh();
            //this.gridView1.RefreshData();
            //this.gridView2.RefreshData();
        }

        private void gridControl2_Click(object sender, EventArgs e)
        {

        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void FTRefer_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void FTRefer_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) {

                //HI.ENTITY.DataInterfaceAX dataContext = new HI.ENTITY.DataInterfaceAX();
                //((IObjectContextAdapter)dataContext).ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, dataContext.TAX_PO_HIT_OB_2Purchase_order_lines );
                //((IObjectContextAdapter)dataContext).ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, dataContext.TAX_PO_HIT_OB_1Purchase_order_headers);
                this.gridControl1.DataSource = null;
                this.gridControl2.DataSource = null;

                this.gridControl1.DataSource = entityInstantFeedbackSource1;
                this.gridControl2.DataSource = entityInstantFeedbackSource2;



                this.gridControl1.RefreshDataSource();
                this.gridControl2.RefreshDataSource();
       
            }
        }
    }
}